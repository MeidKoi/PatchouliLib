@page "/signin"
@using Models
@inject NavigationManager Navigation
@inject UserInfo user
@inject IJSRuntime JSRuntime

<div style="display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #2e2e3a;">
    <div class="col-md-6" style="width: 50vh;">
        <div class="card shadow" style="background-color: #3a3a52;">
            <div class="card-body">
                <h2 class="card-title text-center text-white">Вход</h2>
                <div class="mb-3">
                    <label for="email" class="form-label text-white">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Введите ваш email" @bind="Email">
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label text-white">Пароль</label>
                    <input type="password" class="form-control" id="password" placeholder="Введите ваш пароль" @bind="Password">
                </div>
                <div class="d-grid gap-2">
                    <button @onclick="Authenticate" disabled="@IsButtonDisabled" class="btn btn-primary btn-custom" style="background-color: #6a5acd; border-color: #6a5acd;">
                        Войти
                    </button>
                </div>
                @if (!string.IsNullOrEmpty(ErrorMessage.Message))
                {
                <div class="text-center mt-3">
                    <span style="color: red;">@ErrorMessage.Message</span>
                </div>
                }
                <div class="text-center mt-3">
                    <a href="/register" class="text-white-50">Нет аккаунта? Зарегистрируйтесь</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public string Email = null!;
    public string Password = null!;
    public bool IsButtonDisabled = false;
    public ErrorResponse ErrorMessage = new ErrorResponse();
    public class ErrorResponse
    {
        public string Message { get; set; }
        public int? Code { get; set; }
    }
    private async Task Authenticate()
    {
        IsButtonDisabled = true;
        ErrorMessage.Message = "";
        try
        {
            HttpClient client = new HttpClient
            {
                BaseAddress = new Uri("https://mnogolib.onrender.com"),
            };

            AuthenticateRequest authenticateRequest = new AuthenticateRequest
            {
                Email = Email,
                Password = Password
            };

            var request = new HttpRequestMessage(HttpMethod.Post, "Accounts/authenticate");

            request.Content = JsonContent.Create(authenticateRequest);

            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

            HttpResponseMessage response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                AuthenticateResponse? authenticateResponse = await response.Content.ReadFromJsonAsync<AuthenticateResponse>();
                if (authenticateResponse is not null)
                {
                    user.EmailUser = authenticateResponse.EmailUser;
                    user.IdUser = authenticateResponse.IdUser;
                    user.EmailUser = authenticateResponse.EmailUser;
                    user.NicknameUser = authenticateResponse.NicknameUser;
                    user.IdRole = authenticateResponse.IdRole;
                    user.JwtToken = authenticateResponse.JwtToken;
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "UserInfo", System.Text.Json.JsonSerializer.Serialize(user));
                    Navigation.NavigateTo("/profile");
                }
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                //Console.WriteLine("Response Content: " + responseContent);
                try
                {
                    ErrorMessage = System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(responseContent);
                }
                catch
                {
                    ErrorMessage = new ErrorResponse { Message = "Email or password incorrect" };
                }
                Console.WriteLine(ErrorMessage.Message);
            }
        }
        finally
        {
            IsButtonDisabled = false;
        }
    }
}

<style>
    .btn-custom {
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .btn-custom:active {
        background-color: #4a3f7c !important; /* Более темный цвет при нажатии */
        transform: scale(0.95); /* Небольшое уменьшение кнопки при нажатии */
    }
</style>