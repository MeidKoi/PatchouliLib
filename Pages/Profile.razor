@page "/profile"
@inject NavigationManager Navigation
@inject HttpClient Http
@using Models
@inject User user
@inject IJSRuntime JSRuntime

<div style="display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #2e2e3a;">
    <div class="col-md-8">
        <div class="card shadow" style="background-color: #3a3a52;">
            <div class="card-body">
                <h2 class="card-title text-center text-white" style="padding: 30px;">Читательский билет</h2>
                <div class="row" style="display: flex; justify-content: center; align-items: center; gap: 15px;">
                    <div class="col-md-8">
                        <ul class="list-group">
                            <li class="list-group-item" style="background-color: #4a3f7c; color: white;">Имя: @UserName</li>
                            <li class="list-group-item" style="background-color: #4a3f7c; color: white;">Email: @UserEmail</li>
                            <li class="list-group-item" style="background-color: #4a3f7c; color: white;">Роль: @UserRole</li>
                        </ul>
                        <div class="mt-3">
                            <button class="btn btn-danger" @onclick="Logout">Выйти</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string UserName { get; set; } = "Имя пользователя";
    private string UserEmail { get; set; } = "email@example.com";
    private string UserRole { get; set; } = "Пользователь";
    private string ProfileImage { get; set; } = "https://via.placeholder.com/150";

    private string GetRoleName(int roleId)
    {
        switch (roleId)
        {
            default:
                return "Пользователь";
            case 2:
                return "Модератор";
            case 3:
                return "Бог всея библиотеки";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "JwtToken");

        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/");
            return;
        }
        UserName = user.NicknameUser;
        UserEmail = user.EmailUser;
        UserRole = GetRoleName(user.IdRole);
        // Здесь можно загрузить данные пользователя с сервера
        // Например:
        // var user = await Http.GetFromJsonAsync<User>("api/user/profile");
        // UserName = user.Name;
        // UserEmail = user.Email;
        // UserRole = user.Role;
        // ProfileImage = user.ProfileImage;
    }

    private void EditProfile()
    {
        // Переход на страницу редактирования профиля
    }

    private void Logout()
    {
        // Логика выхода из системы
        // Например, очистка токена и перенаправление на страницу входа
        Navigation.NavigateTo("/signin");
    }
}