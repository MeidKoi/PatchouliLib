@page "/profile"
@inject NavigationManager Navigation
@inject HttpClient Http
@using Models
@using System.Text.Json
@inject UserInfo user
@inject IJSRuntime JSRuntime

<div style="display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #2e2e3a;">
    <div class="col-md-8">
        <div class="card shadow" style="background-color: #3a3a52;">
            <div class="card-body">
                <h2 class="card-title text-center text-white" style="padding: 30px;">Читательский билет</h2>
                <div class="row" style="display: flex; justify-content: center; align-items: center; gap: 15px;">
                    <div class="col-md-8">
                        <ul class="list-group">
                            <li class="list-group-item" style="background-color: #4a3f7c; color: white;">Имя: @UserName</li>
                            <li class="list-group-item" style="background-color: #4a3f7c; color: white;">Email: @UserEmail</li>
                            <li class="list-group-item" style="background-color: #4a3f7c; color: white;">Роль: @UserRole</li>
                        </ul>
                        @if (!IsVerified)
                        {
                        <div class="mt-3" style="display: flex; justify-content: center;">
                           <a href="/verify" style="color: red">Пожалуйста, подтвердите свою почту!</a>
                        </div>
                        }
                        <div class="mt-3" style="display: flex; justify-content: center;">
                            <button class="btn btn-danger" @onclick="Logout">Выйти</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string UserName { get; set; } = "Имя пользователя";
    private string UserEmail { get; set; } = "email@example.com";
    private string UserRole { get; set; } = "Пользователь";
    private string ProfileImage { get; set; } = "https://via.placeholder.com/150";

    public bool IsVerified = true;

    private string GetRoleName(int roleId)
    {
        switch (roleId)
        {
            default:
                return "Пользователь";
            case 2:
                return "Модератор";
            case 3:
                return "Бог всея библиотеки";
        }
    }

    protected override async Task OnInitializedAsync()
    {

        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };

        var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "UserInfo");
        if (!string.IsNullOrEmpty(json))
        {
            user = JsonSerializer.Deserialize<UserInfo>(json, options);
        }

        if (user is null || user.Equals(new UserInfo()))
        {
            Navigation.NavigateTo("/");
            return;
        }
        
        UserName = user.NicknameUser;
        UserEmail = user.EmailUser;
        UserRole = GetRoleName(user.IdRole);

        }
        
        @* var decodedToken = await JSRuntime.InvokeAsync<object>("jwt_decode", user.JwtToken);

        var TokenContent = System.Text.Json.JsonSerializer.Serialize(decodedToken, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });

        var Token = System.Text.Json.JsonSerializer.Deserialize<JwtToken>(TokenContent);

        //var refreshToken = await JSRuntime.InvokeAsync<string>("cookieHelper.getCookie", "refreshToken");
        //var refreshToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "refreshToken");
        
        //Console.WriteLine(refreshToken);

        var newJwtToken = await Token.RefreshTokenIfNeed(user.JwtToken);

        if (newJwtToken is null)
        {
            Console.WriteLine("Токен не обновлен");
            await JSRuntime.InvokeVoidAsync("localStorage.clear");
            Navigation.NavigateTo("/signin");
            return;
        }
        else if (user.JwtToken != newJwtToken)
        {
            user.JwtToken = newJwtToken;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "UserInfo", System.Text.Json.JsonSerializer.Serialize(user));
        }

        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri("https://mnogolibapi-f7vitvir.b4a.run/")
        };
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", user.JwtToken);
        IsVerified = (await client.GetFromJsonAsync<User>($"Accounts/{user.IdUser}")).IsVerified;
    } *@

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.clear");
        Navigation.NavigateTo("/signin");
    }
}